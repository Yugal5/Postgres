What is a database transaction
A database transaction is a single unit of work that consists of one or more operations.

A classical example of a transaction is a bank transfer from one account to another.
A complete transaction must ensure a balance between the sender and receiver accounts. 
It means that if the sender account transfers X amount, the receiver receives X amount, no more or no less.

A PostgreSQL transaction is atomic, consistent, isolated, and durable. These properties are often referred to as ACID:

	Atomicity guarantees that the transaction completes in an all-or-nothing manner.
	Consistency ensures the change to data written to the database must be valid and follow predefined rules.
	Isolation determines how transaction integrity is visible to other transactions.
	Durability makes sure that transactions that have been committed will be stored in the database permanently.
	

INSERT INTO accounts(name,balance)
VALUES('Bob',10000);

PostgreSQL inserted a new row into the accounts table immediately.
In this case, you do not know when the transaction begins and cannot intercept the modification such as rolling it back.


To start a transaction, you use the following statement:

BEGIN TRANSACTION; 
	OR
BEGIN WORK;
	OR
BEGIN;


BEGIN;

INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

#  Even though we have insert commnad is executed here , value can't be seen in DB as we didn't made commmit.

# Note : If we start with BEGIN it must be end it COMMIT WORK; OR COMMIT TRANSACTION; OR COMMIT;


-- start a transaction
BEGIN;

-- insert a new row into the accounts table
INSERT INTO accounts(name,balance)
VALUES('Alice',10000);

-- commit the change (or roll it back later)
COMMIT;



-- start a transaction
BEGIN;

-- deduct 1000 from account 1
UPDATE accounts 
SET balance = balance - 1000
WHERE id = 1;

-- add 1000 to account 2
UPDATE accounts
SET balance = balance + 1000
WHERE id = 2; 

-- select the data from accounts
SELECT id, name, balance
FROM accounts;

-- commit the transaction
COMMIT;


## Rolling back a transaction :

ROLLBACK WORK;
	OR
ROLLBACK TRANSACTION;
	OR
ROLLBACK;

-- begin the transaction
BEGIN;

-- deduct the amount from the account 1
UPDATE accounts 
SET balance = balance - 1500
WHERE id = 1;

-- add the amount from the account 3 (instead of 2)
UPDATE accounts
SET balance = balance + 1500
WHERE id = 3; 

-- roll back the transaction
ROLLBACK;

