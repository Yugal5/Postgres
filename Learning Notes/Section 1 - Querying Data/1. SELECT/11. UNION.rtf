The UNION operator combines result sets of two or more SELECT statements into a single result set.

Syntax :

SELECT select_list_1
FROM table_expresssion_1
UNION
SELECT select_list_2
FROM table_expression_2


To combine the result sets of two queries using the UNION operator, the queries must conform to the following rules:

The number and the order of the columns in the select list of both queries must be the same.
The data types must be compatible.
The UNION operator removes all duplicate rows from the combined data set. To retain the duplicate rows, you use the the UNION ALL instead.


DROP TABLE IF EXISTS top_rated_films;
CREATE TABLE top_rated_films(
	title VARCHAR NOT NULL,
	release_year SMALLINT
);

DROP TABLE IF EXISTS most_popular_films;
CREATE TABLE most_popular_films(
	title VARCHAR NOT NULL,
	release_year SMALLINT
);

INSERT INTO 
   top_rated_films(title,release_year)
VALUES
   ('The Shawshank Redemption',1994),
   ('The Godfather',1972),
   ('12 Angry Men',1957);

INSERT INTO 
   most_popular_films(title,release_year)
VALUES
   ('An American Pickle',2020),
   ('The Godfather',1972),
   ('Greyhound',2020);
   
   
   
   
SELECT * FROM top_rated_films;

SELECT * FROM most_popular_films;

SELECT * FROM top_rated_films
UNION
SELECT * FROM most_popular_films;

## Explain --

This will give us result with 5 rows , actual matched rows are 6 but since we uss UNION it will eliminate duplicate and result unique values.

SELECT * FROM top_rated_films
UNION ALL
SELECT * FROM most_popular_films;

## Explain -- 

This will return us all matched rows including duplicate , bcoz we use UNION ALL.

SELECT * FROM top_rated_films
UNION ALL
SELECT * FROM most_popular_films
ORDER BY title;

## Explain --

If you place the ORDER BY clause at the end of each query, the combined result set will not be sorted as you expected.

Because when UNION operator combines the sorted result sets from each query, it does not guarantee the order of rows in the final result set.